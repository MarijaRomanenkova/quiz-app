generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                       String          @id @default(uuid())
  email                    String          @unique
  password                 String
  username                 String          @unique
  emailVerified            Boolean         @default(false)
  verificationToken        String?         @unique
  verificationTokenExpires DateTime?
  resetToken               String?         @unique
  resetTokenExpiry         DateTime?
  levelId                  String
  createdAt                DateTime        @default(now())
  updatedAt                DateTime        @updatedAt
  marketingEmails          Boolean         @default(false)
  shareDevices             Boolean         @default(false)
  studyPaceId              Int             @default(1)
  agreedToTerms            Boolean         @default(false)
  statistics               Statistics?
  level                    Level           @relation(fields: [levelId], references: [levelId])
}

model Statistics {
  id               String   @id @default(uuid())
  userId           String   @unique
  totalQuizzes     Int      @default(0)
  correctAnswers   Int      @default(0)
  totalQuestions   Int      @default(0)
  averageScore     Float    @default(0)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  dailyQuizTimes   Json?
  totalQuizMinutes Int      @default(0)
  completedTopics  Json?    // Array of completed topic IDs with scores
  user             User     @relation(fields: [userId], references: [id])
}

model Level {
  id          String   @id @default(uuid())
  levelId     String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  topics      Topic[]
  users       User[]
}

model Category {
  id          String   @id @default(uuid())
  categoryId  String   @unique
  description String
  progress    Decimal  @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  topics      Topic[]
}

model Topic {
  id         String     @id @default(uuid())
  topicId    String     @unique
  levelId    String
  categoryId String
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  topicOrder Int
  questions  Question[]
  category   Category   @relation(fields: [categoryId], references: [categoryId])
  level      Level      @relation(fields: [levelId], references: [levelId])
}

model Question {
  questionId      String          @id @default(uuid())
  questionText    String
  options         String[]
  correctAnswerId String
  imageUrl        String?
  audioUrl        String?
  readingTextId   String?
  topicId         String
  readingText     ReadingText?    @relation(fields: [readingTextId], references: [id])
  topic           Topic           @relation(fields: [topicId], references: [topicId])
}

model ReadingText {
  id          String     @id @default(uuid())
  title       String
  textContent String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  questions   Question[]
}
